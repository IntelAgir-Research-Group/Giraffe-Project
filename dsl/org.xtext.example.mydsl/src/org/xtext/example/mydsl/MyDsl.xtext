grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

DomainModel:
	(elements += Type)*
;

Type:
	Create | VirtualMachine | CloudProvider | Deploy | DeployType | DeployApp | Monitor | Stress | Action 
;

/////
// Create definitions
////

Create:
	'create' name = ID '{'
		(vMachine += VirtualMachineFeature)
		(initMachines += InitMachinesFeature)
		(initIncrement += InitIncrementFeature)
	'}'
;

InitMachinesFeature:
	(many = 'many')? name = "initialMachines" ':' type = INT
;

InitIncrementFeature:
	(many = 'many')? name = "initialIncrement" ':' type = INT
;

VirtualMachineFeature:
	(many = 'many')? name = "vMachine" ':' type = [VirtualMachine]
;

VirtualMachine:
	'virtualMachine' name = ID '{'
		(vM += VirtualMachineTypeFeature)
		(cloudProvider += CloudProviderType)
	'}'
;

VirtualMachineTypeFeature:
	(many = 'many')? name = "vM" ':' type = ("Linux1-CloudTest" | "Small")
;

CloudProviderType:
	(many = 'many')? name = "cloudProvider" ':' type = [CloudProvider]
;

CloudProvider:
	'cloudProvider' name = ID '{'
		(cloudType += CloudType)
		(cloudAddress += MgmAddressType)
		(cloudCredential += CloudCredentialType)
		(cloudOptionalTypes += CloudOptionalTypes)*
	'}'
;

CloudOptionalTypes:
	ScriptType | GeoZoneType | CloudUserType | CloudPasswordType
;

CloudType:
	(many = 'many')? name = "cloudType" ':' type = ("G5000" | "AmazonEC2" | "Google" | "VirtualBox")
;

ScriptType:
	(many = 'many')? name = "newMachinesScript" ':' type = STRING
;

GeoZoneType:
	(many = 'many')? name = "geoZone" ':' type = STRING
;

MgmAddressType:
	(many = 'many')? name = "cloudMgmAddress" ':' type = STRING
;

CloudCredentialType:
	(many = 'many')? name = "cloudCredential" ':' type = STRING
;

CloudUserType:
	(many = 'many')? name = "cloudUser" ':' type = STRING
;

CloudPasswordType:
	(many = 'many')? name = "cloudPassword" ':' type = STRING
;

/////
// Deploy definitions
/////

Deploy:
	'deploy' name = ID '{'
		(deployOne += DeployAppFeature)
		(deployTwo += DeployTypeFeature)?
	'}'
;
	
DeployAppFeature:
	(many = 'many')? name = "deployApp" ':' type = [DeployApp]
;

DeployTypeFeature:
	(many = 'many')? name = "deployType" ':' type = [DeployType]
;

DeployType:
	'deployType' name = ID '{'
		// Create a conditional type to prevent possible programming errors
		(range += DeployRangeType)
	'}'
;

DeployRangeType:
	(many = 'many')? name = "range" ':' type = STRING
;

DeployApp:
	'deployApp' name = ID '{'
		(class += DeployAppClassType)
		(deployMasterMethod += DeployAppMasterMethodType)*
		(deploySlaveMethod += DeployAppSlaveMethodType)*
	'}'
;

DeployAppClassType:
	(many = 'many')? name = "class" ':' type = STRING
;

DeployAppMasterMethodType:
	(many = 'many')? name = "deployMasterMethod" ':' type = STRING
;

DeployAppSlaveMethodType:
	(many = 'many')? name = "deploySlaveMethod" ':' type = STRING
;

/////
// Monitor definitions
/////

Monitor:
	'monitor' name = ID '{'
		(range += MonitorRangeType)
		(monitoringType += MonitoringType)?
	'}'
;

MonitorRangeType:
	(many = 'many')? name = "range" ':' type = STRING
;

MonitoringType:
	(many = 'many')? name = "monitoringType" ':' type = ("reactive" | "predictive")
;

/////
// Stress definitions
/////

Stress:
	'stress' name = ID '{'
		(range += StressRangeType)
		(stressClass += StressClassType)*
		(stressMethod += StressMethodType)*
	'}'
;

StressRangeType:
	(many = 'many')? name = "range" ':' type = STRING
;

StressClassType:
	(many = 'many')? name = "stressClass" ':' type = STRING
;

StressMethodType:
	(many = 'many')? name = "stressMethod" ':' type = STRING
;

/////
// Action definitions
/////

Action:
	'action' name = ID '{'
		(range += ActionRangeType)
		(class += ActionClassType)
		(method += ActionMethodType)
	'}'
;

ActionRangeType:
	(many = 'many')? name = "range" ':' type = STRING
;

ActionClassType:
	(many = 'many')? name = "class" ':' type = STRING
;
ActionMethodType:
	(many = 'many')? name = "method" ':' type = STRING
;

/////
// Other feature types
/////
Features:
	name = ID STRING
;

IntFeature:
	name = ID INT
;