/**
 * generated by Xtext
 */
package fr.mines_nantes.atlanmod.giraffe.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Artifact;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Auth;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Code;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.CodeExternal;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.ConfArtifact;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Config;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.ConfigBlock;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Credential;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Dependency;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Deploy;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Execution;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.File;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.FileType;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Install;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Key;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.NativeDistribution;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.NativeProvType;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.NativeSO;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Nodeset;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.OtherProvider;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Password;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Provider;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Providers;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Script;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.ScriptBlock;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.ScriptCommand;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Service;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Setup;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.SrvSignal;
import fr.mines_nantes.atlanmod.giraffe.giraffeDSL.VirtualMachine;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class GiraffeDSLGenerator implements IGenerator {
  private String providers = "";
  
  private String artifacts = "";
  
  private String confartifacts = "";
  
  private String setups = "";
  
  private String deploys = "";
  
  private Resource globalRes;
  
  private String header = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("import java.util.HashMap;");
      _builder.newLine();
      _builder.append("import java.util.Map;");
      _builder.newLine();
      _builder.append("import java.util.List;");
      _builder.newLine();
      _builder.append("import java.util.ArrayList;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class GiraffeDSL {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("static Map<String,Object> provider;");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String foot = new Function0<String>() {
    public String apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("}");
      _builder.newLine();
      return _builder.toString();
    }
  }.apply();
  
  private String mainClass = this.header;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    this.globalRes = resource;
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Provider> _filter = Iterables.<Provider>filter(_iterable, Provider.class);
    for (final Provider p : _filter) {
      CharSequence _compile = this.compile(p);
      String _string = _compile.toString();
      String _plus = (this.providers + _string);
      this.providers = _plus;
    }
    TreeIterator<EObject> _allContents_1 = resource.getAllContents();
    Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
    Iterable<OtherProvider> _filter_1 = Iterables.<OtherProvider>filter(_iterable_1, OtherProvider.class);
    for (final OtherProvider op : _filter_1) {
      CharSequence _compile_1 = this.compile(op);
      String _string_1 = _compile_1.toString();
      String _plus_1 = (this.providers + _string_1);
      this.providers = _plus_1;
    }
    TreeIterator<EObject> _allContents_2 = resource.getAllContents();
    Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
    Iterable<Artifact> _filter_2 = Iterables.<Artifact>filter(_iterable_2, Artifact.class);
    for (final Artifact op_1 : _filter_2) {
      CharSequence _compile_2 = this.compile(op_1);
      String _string_2 = _compile_2.toString();
      String _plus_2 = (this.artifacts + _string_2);
      this.artifacts = _plus_2;
    }
    TreeIterator<EObject> _allContents_3 = resource.getAllContents();
    Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
    Iterable<ConfArtifact> _filter_3 = Iterables.<ConfArtifact>filter(_iterable_3, ConfArtifact.class);
    for (final ConfArtifact op_2 : _filter_3) {
      CharSequence _compile_3 = this.compile(op_2);
      String _string_3 = _compile_3.toString();
      String _plus_3 = (this.confartifacts + _string_3);
      this.confartifacts = _plus_3;
    }
    TreeIterator<EObject> _allContents_4 = resource.getAllContents();
    Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
    Iterable<Setup> _filter_4 = Iterables.<Setup>filter(_iterable_4, Setup.class);
    for (final Setup op_3 : _filter_4) {
      CharSequence _compile_4 = this.compile(op_3);
      String _string_4 = _compile_4.toString();
      String _plus_4 = (this.setups + _string_4);
      this.setups = _plus_4;
    }
    TreeIterator<EObject> _allContents_5 = resource.getAllContents();
    Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
    Iterable<Deploy> _filter_5 = Iterables.<Deploy>filter(_iterable_5, Deploy.class);
    for (final Deploy op_4 : _filter_5) {
      CharSequence _compile_5 = this.compile(op_4);
      String _string_5 = _compile_5.toString();
      String _plus_5 = (this.deploys + _string_5);
      this.deploys = _plus_5;
    }
    this.mainClass = (((((this.mainClass + this.providers) + this.artifacts) + this.confartifacts) + this.setups) + this.deploys);
    this.mainClass = (this.mainClass + this.foot);
    fsa.generateFile(
      "GiraffeDSL.java", 
      this.mainClass);
  }
  
  public CharSequence compile(final Deploy d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Deploy(name=\"");
    String _name = d.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public Map<String, Object> getDeploy");
    String _name_1 = d.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("List<Map<String, Object>> executions = new ArrayList<Map<String, Object>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Map<String, Object>> configs = new ArrayList<Map<String, Object>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Object> setUps = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, Object> deploy = new HashMap<String, Object>();");
    _builder.newLine();
    {
      EList<Setup> _setups = d.getSetups();
      for(final Setup s : _setups) {
        _builder.append("\t");
        _builder.append("setUps.put(\"");
        String _name_2 = s.getName();
        _builder.append(_name_2, "\t");
        _builder.append("\", getSetUp");
        String _name_3 = s.getName();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_name_3);
        _builder.append(_firstUpper_1, "\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("deploy.put(\"setups\", setUps);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("deploy.put(\"timeout\", ");
    int _timeout = d.getTimeout();
    _builder.append(_timeout, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Execution> _executions = d.getExecutions();
      for(final Execution exec : _executions) {
        _builder.append("\t");
        _builder.append("Map<String, Object> execution = new HashMap<String, Object>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("Map<String, Object> appArtifact = new HashMap<String, Object>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("appArtifact.put(\"type\", \"");
        Artifact _code = exec.getCode();
        String _type = _code.getType();
        _builder.append(_type, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("appArtifact.put(\"artifact\", getArtifact");
        Artifact _code_1 = exec.getCode();
        String _name_4 = _code_1.getName();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_name_4);
        _builder.append(_firstUpper_2, "\t");
        _builder.append("());");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("execution.put(\"action\", appArtifact);");
        _builder.newLine();
        {
          EList<ConfArtifact> _config = exec.getConfig();
          for(final ConfArtifact conf : _config) {
            _builder.append("\t");
            _builder.append("Map<String, Object> config = new HashMap<String, Object>();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("config.put(\"name\", \"");
            String _name_5 = conf.getName();
            _builder.append(_name_5, "\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("config.put(\"artifact\", getConfArtifact");
            String _name_6 = conf.getName();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_name_6);
            _builder.append(_firstUpper_3, "\t");
            _builder.append("());");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("configs.add(config);");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("execution.put(\"configs\", configs);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("execution.put(\"range\", ");
        Nodeset _nodes = exec.getNodes();
        String _range = _nodes.getRange();
        _builder.append(_range, "\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("execution.put(\"sequence\", \"");
        int _seq = exec.getSeq();
        _builder.append(_seq, "\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("executions.add(execution);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("deploy.put(\"executions\", executions);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return deploy;");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Setup s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@SetUp(name=\"");
    String _name = s.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public Map<String, Object> getSetUp");
    String _name_1 = s.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<String, Object> setUp = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("setUp.put(\"provider\", \"");
    Providers _provider = s.getProvider();
    String _name_2 = _provider.getName();
    _builder.append(_name_2, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("setUp.put(\"machines\", ");
    int _numberMachines = s.getNumberMachines();
    _builder.append(_numberMachines, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("setUp.put(\"autoscale\", ");
    boolean _isAutoscale = s.isAutoscale();
    _builder.append(_isAutoscale, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("setUp.put(\"predictive\", ");
    boolean _isPredictive = s.isPredictive();
    _builder.append(_isPredictive, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return setUp;");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Artifact a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Artifact(name=\"");
    String _name = a.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public Map<String, Object> getArtifact");
    String _name_1 = a.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<String, Object> artifact = new HashMap<String, Object>(); ");
    _builder.newLine();
    {
      String _type = a.getType();
      boolean _equals = Objects.equal(_type, "code");
      if (_equals) {
        {
          TreeIterator<EObject> _allContents = this.globalRes.getAllContents();
          Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
          Iterable<Code> _filter = Iterables.<Code>filter(_iterable, Code.class);
          for(final Code co : _filter) {
            {
              String _name_2 = co.getName();
              String _name_3 = a.getName();
              boolean _equals_1 = Objects.equal(_name_2, _name_3);
              if (_equals_1) {
                _builder.append("\t");
                _builder.append("artifact.put(\"code\", \"");
                String _code = co.getCode();
                _builder.append(_code, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      String _type_1 = a.getType();
      boolean _equals_2 = Objects.equal(_type_1, "code-external");
      if (_equals_2) {
        {
          TreeIterator<EObject> _allContents_1 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
          Iterable<CodeExternal> _filter_1 = Iterables.<CodeExternal>filter(_iterable_1, CodeExternal.class);
          for(final CodeExternal co_1 : _filter_1) {
            {
              String _name_4 = co_1.getName();
              String _name_5 = a.getName();
              boolean _equals_3 = Objects.equal(_name_4, _name_5);
              if (_equals_3) {
                _builder.append("\t");
                _builder.append("artifact.put(\"class\", ");
                String _class_ = co_1.getClass_();
                _builder.append(_class_, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("artifact.put(\"method\", ");
                String _method = co_1.getMethod();
                _builder.append(_method, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      String _type_2 = a.getType();
      boolean _equals_4 = Objects.equal(_type_2, "script");
      if (_equals_4) {
        {
          TreeIterator<EObject> _allContents_2 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
          Iterable<Script> _filter_2 = Iterables.<Script>filter(_iterable_2, Script.class);
          for(final Script sc : _filter_2) {
            {
              String _name_6 = sc.getName();
              String _name_7 = a.getName();
              boolean _equals_5 = Objects.equal(_name_6, _name_7);
              if (_equals_5) {
                _builder.append("\t");
                _builder.append("artifact.put(\"file\", ");
                String _scriptFile = sc.getScriptFile();
                _builder.append(_scriptFile, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      String _type_3 = a.getType();
      boolean _equals_6 = Objects.equal(_type_3, "script-command");
      if (_equals_6) {
        {
          TreeIterator<EObject> _allContents_3 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
          Iterable<ScriptCommand> _filter_3 = Iterables.<ScriptCommand>filter(_iterable_3, ScriptCommand.class);
          for(final ScriptCommand sc_1 : _filter_3) {
            {
              String _name_8 = sc_1.getName();
              String _name_9 = a.getName();
              boolean _equals_7 = Objects.equal(_name_8, _name_9);
              if (_equals_7) {
                _builder.append("\t");
                _builder.append("artifact.put(\"command\", \"");
                String _scriptCommand = sc_1.getScriptCommand();
                _builder.append(_scriptCommand, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      String _type_4 = a.getType();
      boolean _equals_8 = Objects.equal(_type_4, "script-block");
      if (_equals_8) {
        {
          TreeIterator<EObject> _allContents_4 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
          Iterable<ScriptBlock> _filter_4 = Iterables.<ScriptBlock>filter(_iterable_4, ScriptBlock.class);
          for(final ScriptBlock sc_2 : _filter_4) {
            {
              String _name_10 = sc_2.getName();
              String _name_11 = a.getName();
              boolean _equals_9 = Objects.equal(_name_10, _name_11);
              if (_equals_9) {
                _builder.append("\t");
                _builder.append("artifact.put(\"block\", \"");
                String _block = sc_2.getBlock();
                _builder.append(_block, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("return artifact;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ConfArtifact ca) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Artifact(name=\"");
    String _name = ca.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public Map<String, Object> getConfArtifact");
    String _name_1 = ca.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<String, Object> artifact = new HashMap<String, Object>(); ");
    _builder.newLine();
    {
      String _type = ca.getType();
      boolean _equals = Objects.equal(_type, "config");
      if (_equals) {
        {
          TreeIterator<EObject> _allContents = this.globalRes.getAllContents();
          Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
          Iterable<Config> _filter = Iterables.<Config>filter(_iterable, Config.class);
          for(final Config conf : _filter) {
            {
              String _name_2 = conf.getName();
              String _name_3 = ca.getName();
              boolean _equals_1 = Objects.equal(_name_2, _name_3);
              if (_equals_1) {
                _builder.append("\t");
                _builder.append("artifact.put(\"local\", ");
                String _localFile = conf.getLocalFile();
                _builder.append(_localFile, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("artifact.put(\"remote\", ");
                String _destFile = conf.getDestFile();
                _builder.append(_destFile, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      String _type_1 = ca.getType();
      boolean _equals_2 = Objects.equal(_type_1, "config-block");
      if (_equals_2) {
        {
          TreeIterator<EObject> _allContents_1 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
          Iterable<ConfigBlock> _filter_1 = Iterables.<ConfigBlock>filter(_iterable_1, ConfigBlock.class);
          for(final ConfigBlock conf_1 : _filter_1) {
            {
              String _name_4 = conf_1.getName();
              String _name_5 = ca.getName();
              boolean _equals_3 = Objects.equal(_name_4, _name_5);
              if (_equals_3) {
                _builder.append("\t");
                _builder.append("artifact.put(\"local\", ");
                String _config = conf_1.getConfig();
                _builder.append(_config, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("artifact.put(\"remote\", ");
                String _destFile_1 = conf_1.getDestFile();
                _builder.append(_destFile_1, "\t");
                _builder.append(");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("return artifact;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Provider p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Provider(name=\"");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("public Map<String, Object> getProvider");
    String _name_1 = p.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name_1);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<String, Object> providerFeatures = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, String> vMachine = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<String, String> dependency = new HashMap<String, String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<String> requirements = new ArrayList<String>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("List<Map<String, String>> dependencies = new ArrayList<Map<String, String>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"providerType\", new String(\"");
    NativeProvType _type = p.getType();
    _builder.append(_type, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"authType\", new String(\"");
    Auth _authMethod = p.getAuthMethod();
    String _type_1 = _authMethod.getType();
    _builder.append(_type_1, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    {
      Auth _authMethod_1 = p.getAuthMethod();
      String _type_2 = _authMethod_1.getType();
      boolean _equals = Objects.equal(_type_2, "password");
      if (_equals) {
        {
          TreeIterator<EObject> _allContents = this.globalRes.getAllContents();
          Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
          Iterable<Password> _filter = Iterables.<Password>filter(_iterable, Password.class);
          for(final Password pass : _filter) {
            {
              String _name_2 = pass.getName();
              Auth _authMethod_2 = p.getAuthMethod();
              String _name_3 = _authMethod_2.getName();
              boolean _equals_1 = Objects.equal(_name_2, _name_3);
              if (_equals_1) {
                _builder.append("\t");
                _builder.append("providerFeatures.put(\"authUser\", new String(\"");
                String _username = pass.getUsername();
                _builder.append(_username, "\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("providerFeatures.put(\"authPassword\", new String(\"");
                String _password = pass.getPassword();
                _builder.append(_password, "\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      Auth _authMethod_3 = p.getAuthMethod();
      String _type_3 = _authMethod_3.getType();
      boolean _equals_2 = Objects.equal(_type_3, "key");
      if (_equals_2) {
        {
          TreeIterator<EObject> _allContents_1 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_1 = IteratorExtensions.<EObject>toIterable(_allContents_1);
          Iterable<Key> _filter_1 = Iterables.<Key>filter(_iterable_1, Key.class);
          for(final Key k : _filter_1) {
            {
              String _name_4 = k.getName();
              Auth _authMethod_4 = p.getAuthMethod();
              String _name_5 = _authMethod_4.getName();
              boolean _equals_3 = Objects.equal(_name_4, _name_5);
              if (_equals_3) {
                _builder.append("\t");
                _builder.append("providerFeatures.put(\"authKey\", new String(\"");
                String _keyFile = k.getKeyFile();
                _builder.append(_keyFile, "\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      Auth _authMethod_5 = p.getAuthMethod();
      String _type_4 = _authMethod_5.getType();
      boolean _equals_4 = Objects.equal(_type_4, "credential");
      if (_equals_4) {
        {
          TreeIterator<EObject> _allContents_2 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_2 = IteratorExtensions.<EObject>toIterable(_allContents_2);
          Iterable<Credential> _filter_2 = Iterables.<Credential>filter(_iterable_2, Credential.class);
          for(final Credential c : _filter_2) {
            {
              String _name_6 = c.getName();
              Auth _authMethod_6 = p.getAuthMethod();
              String _name_7 = _authMethod_6.getName();
              boolean _equals_5 = Objects.equal(_name_6, _name_7);
              if (_equals_5) {
                _builder.append("\t");
                _builder.append("providerFeatures.put(\"authCredential\", new String(\"");
                String _credentialFile = c.getCredentialFile();
                _builder.append(_credentialFile, "\t");
                _builder.append("\"));");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"cpu\", new String(\"");
    fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Resource _resources = p.getResources();
    String _cpu = _resources.getCpu();
    _builder.append(_cpu, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"memory\", new String(\"");
    fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Resource _resources_1 = p.getResources();
    int _memory = _resources_1.getMemory();
    _builder.append(_memory, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"disk\", new String(\"");
    fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Resource _resources_2 = p.getResources();
    int _disk = _resources_2.getDisk();
    _builder.append(_disk, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"resRelax\", new String(\"");
    fr.mines_nantes.atlanmod.giraffe.giraffeDSL.Resource _resources_3 = p.getResources();
    int _relax = _resources_3.getRelax();
    _builder.append(_relax, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vMachine.put(\"so\", \"");
    VirtualMachine _vm = p.getVm();
    NativeSO _so = _vm.getSo();
    _builder.append(_so, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vMachine.put(\"distribution\", \"");
    VirtualMachine _vm_1 = p.getVm();
    NativeDistribution _distribution = _vm_1.getDistribution();
    _builder.append(_distribution, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vMachine.put(\"version\", \"");
    VirtualMachine _vm_2 = p.getVm();
    float _version = _vm_2.getVersion();
    _builder.append(_version, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("vMachine.put(\"authtype\", \"");
    VirtualMachine _vm_3 = p.getVm();
    Auth _auth = _vm_3.getAuth();
    String _type_5 = _auth.getType();
    _builder.append(_type_5, "\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      VirtualMachine _vm_4 = p.getVm();
      Auth _auth_1 = _vm_4.getAuth();
      String _type_6 = _auth_1.getType();
      boolean _equals_6 = Objects.equal(_type_6, "password");
      if (_equals_6) {
        {
          TreeIterator<EObject> _allContents_3 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_3 = IteratorExtensions.<EObject>toIterable(_allContents_3);
          Iterable<Password> _filter_3 = Iterables.<Password>filter(_iterable_3, Password.class);
          for(final Password pass_1 : _filter_3) {
            {
              String _name_8 = pass_1.getName();
              VirtualMachine _vm_5 = p.getVm();
              Auth _auth_2 = _vm_5.getAuth();
              String _name_9 = _auth_2.getName();
              boolean _equals_7 = Objects.equal(_name_8, _name_9);
              if (_equals_7) {
                _builder.append("\t");
                _builder.append("vMachine.put(\"user\", \"");
                String _username_1 = pass_1.getUsername();
                _builder.append(_username_1, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("vMachine.put(\"password\", \"");
                String _password_1 = pass_1.getPassword();
                _builder.append(_password_1, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      VirtualMachine _vm_6 = p.getVm();
      Auth _auth_3 = _vm_6.getAuth();
      String _type_7 = _auth_3.getType();
      boolean _equals_8 = Objects.equal(_type_7, "key");
      if (_equals_8) {
        {
          TreeIterator<EObject> _allContents_4 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_4 = IteratorExtensions.<EObject>toIterable(_allContents_4);
          Iterable<Key> _filter_4 = Iterables.<Key>filter(_iterable_4, Key.class);
          for(final Key k_1 : _filter_4) {
            {
              String _name_10 = k_1.getName();
              VirtualMachine _vm_7 = p.getVm();
              Auth _auth_4 = _vm_7.getAuth();
              String _name_11 = _auth_4.getName();
              boolean _equals_9 = Objects.equal(_name_10, _name_11);
              if (_equals_9) {
                _builder.append("\t");
                _builder.append("vMachine.put(\"key\", \"");
                String _keyFile_1 = k_1.getKeyFile();
                _builder.append(_keyFile_1, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      VirtualMachine _vm_8 = p.getVm();
      Auth _auth_5 = _vm_8.getAuth();
      String _type_8 = _auth_5.getType();
      boolean _equals_10 = Objects.equal(_type_8, "credential");
      if (_equals_10) {
        {
          TreeIterator<EObject> _allContents_5 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_5 = IteratorExtensions.<EObject>toIterable(_allContents_5);
          Iterable<Credential> _filter_5 = Iterables.<Credential>filter(_iterable_5, Credential.class);
          for(final Credential c_1 : _filter_5) {
            {
              String _name_12 = c_1.getName();
              VirtualMachine _vm_9 = p.getVm();
              Auth _auth_6 = _vm_9.getAuth();
              String _name_13 = _auth_6.getName();
              boolean _equals_11 = Objects.equal(_name_12, _name_13);
              if (_equals_11) {
                _builder.append("\t");
                _builder.append("vMachine.put(\"credential\", \"");
                String _credentialFile_1 = c_1.getCredentialFile();
                _builder.append(_credentialFile_1, "\t");
                _builder.append("\");");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"vm\", vMachine);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      VirtualMachine _vm_10 = p.getVm();
      EList<Dependency> _dep = _vm_10.getDep();
      for(final Dependency de : _dep) {
        {
          TreeIterator<EObject> _allContents_6 = this.globalRes.getAllContents();
          Iterable<EObject> _iterable_6 = IteratorExtensions.<EObject>toIterable(_allContents_6);
          Iterable<Dependency> _filter_6 = Iterables.<Dependency>filter(_iterable_6, Dependency.class);
          for(final Dependency dep : _filter_6) {
            {
              String _name_14 = dep.getName();
              String _name_15 = de.getName();
              boolean _equals_12 = Objects.equal(_name_14, _name_15);
              if (_equals_12) {
                {
                  String _type_9 = dep.getType();
                  boolean _equals_13 = Objects.equal(_type_9, "install");
                  if (_equals_13) {
                    {
                      TreeIterator<EObject> _allContents_7 = this.globalRes.getAllContents();
                      Iterable<EObject> _iterable_7 = IteratorExtensions.<EObject>toIterable(_allContents_7);
                      Iterable<Install> _filter_7 = Iterables.<Install>filter(_iterable_7, Install.class);
                      for(final Install install : _filter_7) {
                        {
                          String _name_16 = dep.getName();
                          String _name_17 = install.getName();
                          boolean _equals_14 = Objects.equal(_name_16, _name_17);
                          if (_equals_14) {
                            _builder.append("dependency.put(\"name\", \"");
                            String _name_18 = install.getName();
                            _builder.append(_name_18, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"type\", \"install\");");
                            _builder.newLine();
                            _builder.append("dependency.put(\"package\", \"");
                            String _depName = install.getDepName();
                            _builder.append(_depName, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"version\", \"");
                            float _depVersion = install.getDepVersion();
                            _builder.append(_depVersion, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                {
                  String _type_10 = dep.getType();
                  boolean _equals_15 = Objects.equal(_type_10, "service");
                  if (_equals_15) {
                    {
                      TreeIterator<EObject> _allContents_8 = this.globalRes.getAllContents();
                      Iterable<EObject> _iterable_8 = IteratorExtensions.<EObject>toIterable(_allContents_8);
                      Iterable<Service> _filter_8 = Iterables.<Service>filter(_iterable_8, Service.class);
                      for(final Service service : _filter_8) {
                        {
                          String _name_19 = dep.getName();
                          String _name_20 = service.getName();
                          boolean _equals_16 = Objects.equal(_name_19, _name_20);
                          if (_equals_16) {
                            _builder.append("dependency.put(\"name\", \"");
                            String _name_21 = service.getName();
                            _builder.append(_name_21, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"type\", \"service\");");
                            _builder.newLine();
                            _builder.append("dependency.put(\"action\", \"");
                            SrvSignal _srvAction = service.getSrvAction();
                            _builder.append(_srvAction, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"srvName\", \"");
                            String _serviceName = service.getServiceName();
                            _builder.append(_serviceName, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                {
                  String _type_11 = dep.getType();
                  boolean _equals_17 = Objects.equal(_type_11, "file");
                  if (_equals_17) {
                    {
                      TreeIterator<EObject> _allContents_9 = this.globalRes.getAllContents();
                      Iterable<EObject> _iterable_9 = IteratorExtensions.<EObject>toIterable(_allContents_9);
                      Iterable<File> _filter_9 = Iterables.<File>filter(_iterable_9, File.class);
                      for(final File file : _filter_9) {
                        {
                          String _name_22 = dep.getName();
                          String _name_23 = file.getName();
                          boolean _equals_18 = Objects.equal(_name_22, _name_23);
                          if (_equals_18) {
                            _builder.append("dependency.put(\"name\", \"");
                            String _name_24 = file.getName();
                            _builder.append(_name_24, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"type\", \"file\");");
                            _builder.newLine();
                            _builder.append("dependency.put(\"type\", \"");
                            FileType _fileType = file.getFileType();
                            _builder.append(_fileType, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                            _builder.append("dependency.put(\"location\", \"");
                            String _location = file.getLocation();
                            _builder.append(_location, "");
                            _builder.append("\");");
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("dependencies.add(dependency);");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"dependencies\", dependencies);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return providerFeatures;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final OtherProvider op) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@Provider");
    _builder.newLine();
    _builder.append("public static Map<String, Object> getProvider");
    String _name = op.getName();
    String _firstUpper = StringExtensions.toFirstUpper(_name);
    _builder.append(_firstUpper, "");
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<String, Object> providerFeatures = new HashMap<String, Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"providerName\", new String(\"");
    String _name_1 = op.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("providerFeatures.put(\"authName\", new String(\"");
    Auth _authMethod = op.getAuthMethod();
    String _name_2 = _authMethod.getName();
    _builder.append(_name_2, "\t");
    _builder.append("\"));");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return providerFeatures;");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    return _builder;
  }
}
