/*
* generated by Xtext
*/
package fr.mines_nantes.atlanmod.giraffe.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GiraffeDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class GiraffeMetaModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GiraffeMetaModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_1_0 = (RuleCall)cEnvironmentAssignment_1.eContents().get(0);
		private final Assignment cDeploymentdefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeploymentdefinitionsDeploymentDefinitionsParserRuleCall_2_0 = (RuleCall)cDeploymentdefinitionsAssignment_2.eContents().get(0);
		private final Assignment cDeploymentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeploymentDeploymentParserRuleCall_3_0 = (RuleCall)cDeploymentAssignment_3.eContents().get(0);
		
		//////
		//// Finish the deployment-definitions and deployment
		//// Review the elements names <-> Model names
		//// Blocks of Code
		//// Create a Xtend GiraffeDSL to Java code creator (Annotations + Return statements), only to extract the elements
		////// 
		//GiraffeMetaModel:
		//	imports+=Import* environment=Environment deploymentdefinitions=DeploymentDefinitions deployment=Deployment;
		public ParserRule getRule() { return rule; }

		//imports+=Import* environment=Environment deploymentdefinitions=DeploymentDefinitions deployment=Deployment
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//environment=Environment
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }

		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_1_0() { return cEnvironmentEnvironmentParserRuleCall_1_0; }

		//deploymentdefinitions=DeploymentDefinitions
		public Assignment getDeploymentdefinitionsAssignment_2() { return cDeploymentdefinitionsAssignment_2; }

		//DeploymentDefinitions
		public RuleCall getDeploymentdefinitionsDeploymentDefinitionsParserRuleCall_2_0() { return cDeploymentdefinitionsDeploymentDefinitionsParserRuleCall_2_0; }

		//deployment=Deployment
		public Assignment getDeploymentAssignment_3() { return cDeploymentAssignment_3; }

		//Deployment
		public RuleCall getDeploymentDeploymentParserRuleCall_3_0() { return cDeploymentDeploymentParserRuleCall_3_0; }
	}

	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Environment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvironmentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAuthsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAuthsAuthParserRuleCall_3_0 = (RuleCall)cAuthsAssignment_3.eContents().get(0);
		private final Assignment cResourcesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cResourcesResourceParserRuleCall_4_0 = (RuleCall)cResourcesAssignment_4.eContents().get(0);
		private final Assignment cDependenciesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDependenciesDependencyParserRuleCall_5_0 = (RuleCall)cDependenciesAssignment_5.eContents().get(0);
		private final Assignment cVirtualmachinesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cVirtualmachinesVirtualMachineParserRuleCall_6_0 = (RuleCall)cVirtualmachinesAssignment_6.eContents().get(0);
		private final Assignment cProvidersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProvidersProvidersParserRuleCall_7_0 = (RuleCall)cProvidersAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Environment:
		//	{Environment} "environment" "{" auths+=Auth* resources+=Resource* dependencies+=Dependency*
		//	virtualmachines+=VirtualMachine* providers+=Providers* "}";
		public ParserRule getRule() { return rule; }

		//{Environment} "environment" "{" auths+=Auth* resources+=Resource* dependencies+=Dependency*
		//virtualmachines+=VirtualMachine* providers+=Providers* "}"
		public Group getGroup() { return cGroup; }

		//{Environment}
		public Action getEnvironmentAction_0() { return cEnvironmentAction_0; }

		//"environment"
		public Keyword getEnvironmentKeyword_1() { return cEnvironmentKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//auths+=Auth*
		public Assignment getAuthsAssignment_3() { return cAuthsAssignment_3; }

		//Auth
		public RuleCall getAuthsAuthParserRuleCall_3_0() { return cAuthsAuthParserRuleCall_3_0; }

		//resources+=Resource*
		public Assignment getResourcesAssignment_4() { return cResourcesAssignment_4; }

		//Resource
		public RuleCall getResourcesResourceParserRuleCall_4_0() { return cResourcesResourceParserRuleCall_4_0; }

		//dependencies+=Dependency*
		public Assignment getDependenciesAssignment_5() { return cDependenciesAssignment_5; }

		//Dependency
		public RuleCall getDependenciesDependencyParserRuleCall_5_0() { return cDependenciesDependencyParserRuleCall_5_0; }

		//virtualmachines+=VirtualMachine*
		public Assignment getVirtualmachinesAssignment_6() { return cVirtualmachinesAssignment_6; }

		//VirtualMachine
		public RuleCall getVirtualmachinesVirtualMachineParserRuleCall_6_0() { return cVirtualmachinesVirtualMachineParserRuleCall_6_0; }

		//providers+=Providers*
		public Assignment getProvidersAssignment_7() { return cProvidersAssignment_7; }

		//Providers
		public RuleCall getProvidersProvidersParserRuleCall_7_0() { return cProvidersProvidersParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class DeploymentDefinitionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeploymentDefinitions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeploymentDefinitionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDeploymentDefinitionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArtifactsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cArtifactsAlternatives_3_0 = (Alternatives)cArtifactsAssignment_3.eContents().get(0);
		private final RuleCall cArtifactsArtifactParserRuleCall_3_0_0 = (RuleCall)cArtifactsAlternatives_3_0.eContents().get(0);
		private final RuleCall cArtifactsConfArtifactParserRuleCall_3_0_1 = (RuleCall)cArtifactsAlternatives_3_0.eContents().get(1);
		private final Assignment cNodesetsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNodesetsNodesetParserRuleCall_4_0 = (RuleCall)cNodesetsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DeploymentDefinitions:
		//	{DeploymentDefinitions} "deployment-definitions" "{" artifacts+=(Artifact | ConfArtifact)* nodesets+=Nodeset* "}";
		public ParserRule getRule() { return rule; }

		//{DeploymentDefinitions} "deployment-definitions" "{" artifacts+=(Artifact | ConfArtifact)* nodesets+=Nodeset* "}"
		public Group getGroup() { return cGroup; }

		//{DeploymentDefinitions}
		public Action getDeploymentDefinitionsAction_0() { return cDeploymentDefinitionsAction_0; }

		//"deployment-definitions"
		public Keyword getDeploymentDefinitionsKeyword_1() { return cDeploymentDefinitionsKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//artifacts+=(Artifact | ConfArtifact)*
		public Assignment getArtifactsAssignment_3() { return cArtifactsAssignment_3; }

		//Artifact | ConfArtifact
		public Alternatives getArtifactsAlternatives_3_0() { return cArtifactsAlternatives_3_0; }

		//Artifact
		public RuleCall getArtifactsArtifactParserRuleCall_3_0_0() { return cArtifactsArtifactParserRuleCall_3_0_0; }

		//ConfArtifact
		public RuleCall getArtifactsConfArtifactParserRuleCall_3_0_1() { return cArtifactsConfArtifactParserRuleCall_3_0_1; }

		//nodesets+=Nodeset*
		public Assignment getNodesetsAssignment_4() { return cNodesetsAssignment_4; }

		//Nodeset
		public RuleCall getNodesetsNodesetParserRuleCall_4_0() { return cNodesetsNodesetParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DeploymentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deployment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeploymentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSetupsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSetupsSetupParserRuleCall_2_0 = (RuleCall)cSetupsAssignment_2.eContents().get(0);
		private final Assignment cDeploysAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeploysDeployParserRuleCall_3_0 = (RuleCall)cDeploysAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Deployment:
		//	"deployment" "{" setups=Setup deploys=Deploy "}";
		public ParserRule getRule() { return rule; }

		//"deployment" "{" setups=Setup deploys=Deploy "}"
		public Group getGroup() { return cGroup; }

		//"deployment"
		public Keyword getDeploymentKeyword_0() { return cDeploymentKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//setups=Setup
		public Assignment getSetupsAssignment_2() { return cSetupsAssignment_2; }

		//Setup
		public RuleCall getSetupsSetupParserRuleCall_2_0() { return cSetupsSetupParserRuleCall_2_0; }

		//deploys=Deploy
		public Assignment getDeploysAssignment_3() { return cDeploysAssignment_3; }

		//Deploy
		public RuleCall getDeploysDeployParserRuleCall_3_0() { return cDeploysDeployParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class VirtualMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VirtualMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVirtualmachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSoAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSoNativeSOEnumRuleCall_3_0_0 = (RuleCall)cSoAssignment_3_0.eContents().get(0);
		private final Assignment cDistributionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDistributionNativeDistributionEnumRuleCall_3_1_0 = (RuleCall)cDistributionAssignment_3_1.eContents().get(0);
		private final Assignment cVersionAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cVersionEFloatParserRuleCall_3_2_0 = (RuleCall)cVersionAssignment_3_2.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAuthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cAuthAuthCrossReference_5_0 = (CrossReference)cAuthAssignment_5.eContents().get(0);
		private final RuleCall cAuthAuthIDTerminalRuleCall_5_0_1 = (RuleCall)cAuthAuthCrossReference_5_0.eContents().get(1);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDepAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cDepDependencyCrossReference_7_0 = (CrossReference)cDepAssignment_7.eContents().get(0);
		private final RuleCall cDepDependencyIDTerminalRuleCall_7_0_1 = (RuleCall)cDepDependencyCrossReference_7_0.eContents().get(1);
		
		//////
		//// GiraffeDSL Elements
		//////
		///////////////////////////////////////////////////////////////////
		//VirtualMachine:
		//	"virtualmachine" name=EString ":=" (so=NativeSO distribution=NativeDistribution version=EFloat) "," auth=[Auth]? ","
		//	dep+=[Dependency]* // "," (requirements+=Requeriments)*
		//;
		public ParserRule getRule() { return rule; }

		//"virtualmachine" name=EString ":=" (so=NativeSO distribution=NativeDistribution version=EFloat) "," auth=[Auth]? ","
		//dep+=[Dependency]* // "," (requirements+=Requeriments)*
		public Group getGroup() { return cGroup; }

		//"virtualmachine"
		public Keyword getVirtualmachineKeyword_0() { return cVirtualmachineKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//so=NativeSO distribution=NativeDistribution version=EFloat
		public Group getGroup_3() { return cGroup_3; }

		//so=NativeSO
		public Assignment getSoAssignment_3_0() { return cSoAssignment_3_0; }

		//NativeSO
		public RuleCall getSoNativeSOEnumRuleCall_3_0_0() { return cSoNativeSOEnumRuleCall_3_0_0; }

		//distribution=NativeDistribution
		public Assignment getDistributionAssignment_3_1() { return cDistributionAssignment_3_1; }

		//NativeDistribution
		public RuleCall getDistributionNativeDistributionEnumRuleCall_3_1_0() { return cDistributionNativeDistributionEnumRuleCall_3_1_0; }

		//version=EFloat
		public Assignment getVersionAssignment_3_2() { return cVersionAssignment_3_2; }

		//EFloat
		public RuleCall getVersionEFloatParserRuleCall_3_2_0() { return cVersionEFloatParserRuleCall_3_2_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//auth=[Auth]?
		public Assignment getAuthAssignment_5() { return cAuthAssignment_5; }

		//[Auth]
		public CrossReference getAuthAuthCrossReference_5_0() { return cAuthAuthCrossReference_5_0; }

		//ID
		public RuleCall getAuthAuthIDTerminalRuleCall_5_0_1() { return cAuthAuthIDTerminalRuleCall_5_0_1; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//dep+=[Dependency]*
		public Assignment getDepAssignment_7() { return cDepAssignment_7; }

		//[Dependency]
		public CrossReference getDepDependencyCrossReference_7_0() { return cDepDependencyCrossReference_7_0; }

		//ID
		public RuleCall getDepDependencyIDTerminalRuleCall_7_0_1() { return cDepDependencyIDTerminalRuleCall_7_0_1; }
	}

	public class RequerimentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requeriments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNativeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNativeNativeRequirementEnumRuleCall_0_0 = (RuleCall)cNativeAssignment_0.eContents().get(0);
		private final Assignment cOtherAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOtherEStringParserRuleCall_1_0 = (RuleCall)cOtherAssignment_1.eContents().get(0);
		
		//Requeriments:
		//	native=NativeRequirement | other=EString;
		public ParserRule getRule() { return rule; }

		//native=NativeRequirement | other=EString
		public Alternatives getAlternatives() { return cAlternatives; }

		//native=NativeRequirement
		public Assignment getNativeAssignment_0() { return cNativeAssignment_0; }

		//NativeRequirement
		public RuleCall getNativeNativeRequirementEnumRuleCall_0_0() { return cNativeNativeRequirementEnumRuleCall_0_0; }

		//other=EString
		public Assignment getOtherAssignment_1() { return cOtherAssignment_1; }

		//EString
		public RuleCall getOtherEStringParserRuleCall_1_0() { return cOtherEStringParserRuleCall_1_0; }
	}

	public class ProvidersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Providers");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProviderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOtherProviderParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////
		//Providers:
		//	Provider | OtherProvider;
		public ParserRule getRule() { return rule; }

		//Provider | OtherProvider
		public Alternatives getAlternatives() { return cAlternatives; }

		//Provider
		public RuleCall getProviderParserRuleCall_0() { return cProviderParserRuleCall_0; }

		//OtherProvider
		public RuleCall getOtherProviderParserRuleCall_1() { return cOtherProviderParserRuleCall_1; }
	}

	public class ProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Provider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeNativeProvTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAuthMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAuthMethodAuthCrossReference_4_0 = (CrossReference)cAuthMethodAssignment_4.eContents().get(0);
		private final RuleCall cAuthMethodAuthIDTerminalRuleCall_4_0_1 = (RuleCall)cAuthMethodAuthCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResourcesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cResourcesResourceCrossReference_6_0 = (CrossReference)cResourcesAssignment_6.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_6_0_1 = (RuleCall)cResourcesResourceCrossReference_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVmAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cVmVirtualMachineCrossReference_8_0 = (CrossReference)cVmAssignment_8.eContents().get(0);
		private final RuleCall cVmVirtualMachineIDTerminalRuleCall_8_0_1 = (RuleCall)cVmVirtualMachineCrossReference_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cHostAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHostEStringParserRuleCall_10_0 = (RuleCall)cHostAssignment_10.eContents().get(0);
		
		//Provider:
		//	"provider" type=NativeProvType name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine]
		//	"," host=EString;
		public ParserRule getRule() { return rule; }

		//"provider" type=NativeProvType name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine] ","
		//host=EString
		public Group getGroup() { return cGroup; }

		//"provider"
		public Keyword getProviderKeyword_0() { return cProviderKeyword_0; }

		//type=NativeProvType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//NativeProvType
		public RuleCall getTypeNativeProvTypeEnumRuleCall_1_0() { return cTypeNativeProvTypeEnumRuleCall_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//authMethod=[Auth]
		public Assignment getAuthMethodAssignment_4() { return cAuthMethodAssignment_4; }

		//[Auth]
		public CrossReference getAuthMethodAuthCrossReference_4_0() { return cAuthMethodAuthCrossReference_4_0; }

		//ID
		public RuleCall getAuthMethodAuthIDTerminalRuleCall_4_0_1() { return cAuthMethodAuthIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//resources=[Resource]
		public Assignment getResourcesAssignment_6() { return cResourcesAssignment_6; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_6_0() { return cResourcesResourceCrossReference_6_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_6_0_1() { return cResourcesResourceIDTerminalRuleCall_6_0_1; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//vm=[VirtualMachine]
		public Assignment getVmAssignment_8() { return cVmAssignment_8; }

		//[VirtualMachine]
		public CrossReference getVmVirtualMachineCrossReference_8_0() { return cVmVirtualMachineCrossReference_8_0; }

		//ID
		public RuleCall getVmVirtualMachineIDTerminalRuleCall_8_0_1() { return cVmVirtualMachineIDTerminalRuleCall_8_0_1; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//host=EString
		public Assignment getHostAssignment_10() { return cHostAssignment_10; }

		//EString
		public RuleCall getHostEStringParserRuleCall_10_0() { return cHostEStringParserRuleCall_10_0; }
	}

	public class OtherProviderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OtherProvider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeOtherKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAuthMethodAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAuthMethodAuthCrossReference_4_0 = (CrossReference)cAuthMethodAssignment_4.eContents().get(0);
		private final RuleCall cAuthMethodAuthIDTerminalRuleCall_4_0_1 = (RuleCall)cAuthMethodAuthCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cResourcesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cResourcesResourceCrossReference_6_0 = (CrossReference)cResourcesAssignment_6.eContents().get(0);
		private final RuleCall cResourcesResourceIDTerminalRuleCall_6_0_1 = (RuleCall)cResourcesResourceCrossReference_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cVmAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cVmVirtualMachineCrossReference_8_0 = (CrossReference)cVmAssignment_8.eContents().get(0);
		private final RuleCall cVmVirtualMachineIDTerminalRuleCall_8_0_1 = (RuleCall)cVmVirtualMachineCrossReference_8_0.eContents().get(1);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cHostAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHostEStringParserRuleCall_10_0 = (RuleCall)cHostAssignment_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cImportsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cImportsImportParserRuleCall_12_0 = (RuleCall)cImportsAssignment_12.eContents().get(0);
		private final Keyword cConnectionKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Keyword cLeftCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cRightCurlyBracketKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cResourcesKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Keyword cLeftCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		private final Keyword cRightCurlyBracketKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Keyword cVirtualmachineKeyword_19 = (Keyword)cGroup.eContents().get(19);
		private final Keyword cLeftCurlyBracketKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Keyword cRightCurlyBracketKeyword_21 = (Keyword)cGroup.eContents().get(21);
		private final Keyword cRightCurlyBracketKeyword_22 = (Keyword)cGroup.eContents().get(22);
		
		//OtherProvider:
		//	"provider" type="other" name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine] ","
		//	host=EString "{" imports+=Import* "connection" "{" "}" "resources" "{" "}" "virtualmachine" "{" "}" "}";
		public ParserRule getRule() { return rule; }

		//"provider" type="other" name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine] ","
		//host=EString "{" imports+=Import* "connection" "{" "}" "resources" "{" "}" "virtualmachine" "{" "}" "}"
		public Group getGroup() { return cGroup; }

		//"provider"
		public Keyword getProviderKeyword_0() { return cProviderKeyword_0; }

		//type="other"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"other"
		public Keyword getTypeOtherKeyword_1_0() { return cTypeOtherKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//authMethod=[Auth]
		public Assignment getAuthMethodAssignment_4() { return cAuthMethodAssignment_4; }

		//[Auth]
		public CrossReference getAuthMethodAuthCrossReference_4_0() { return cAuthMethodAuthCrossReference_4_0; }

		//ID
		public RuleCall getAuthMethodAuthIDTerminalRuleCall_4_0_1() { return cAuthMethodAuthIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//resources=[Resource]
		public Assignment getResourcesAssignment_6() { return cResourcesAssignment_6; }

		//[Resource]
		public CrossReference getResourcesResourceCrossReference_6_0() { return cResourcesResourceCrossReference_6_0; }

		//ID
		public RuleCall getResourcesResourceIDTerminalRuleCall_6_0_1() { return cResourcesResourceIDTerminalRuleCall_6_0_1; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//vm=[VirtualMachine]
		public Assignment getVmAssignment_8() { return cVmAssignment_8; }

		//[VirtualMachine]
		public CrossReference getVmVirtualMachineCrossReference_8_0() { return cVmVirtualMachineCrossReference_8_0; }

		//ID
		public RuleCall getVmVirtualMachineIDTerminalRuleCall_8_0_1() { return cVmVirtualMachineIDTerminalRuleCall_8_0_1; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//host=EString
		public Assignment getHostAssignment_10() { return cHostAssignment_10; }

		//EString
		public RuleCall getHostEStringParserRuleCall_10_0() { return cHostEStringParserRuleCall_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_11() { return cLeftCurlyBracketKeyword_11; }

		//imports+=Import*
		public Assignment getImportsAssignment_12() { return cImportsAssignment_12; }

		//Import
		public RuleCall getImportsImportParserRuleCall_12_0() { return cImportsImportParserRuleCall_12_0; }

		//"connection"
		public Keyword getConnectionKeyword_13() { return cConnectionKeyword_13; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_14() { return cLeftCurlyBracketKeyword_14; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_15() { return cRightCurlyBracketKeyword_15; }

		//"resources"
		public Keyword getResourcesKeyword_16() { return cResourcesKeyword_16; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_17() { return cLeftCurlyBracketKeyword_17; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_18() { return cRightCurlyBracketKeyword_18; }

		//"virtualmachine"
		public Keyword getVirtualmachineKeyword_19() { return cVirtualmachineKeyword_19; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_20() { return cLeftCurlyBracketKeyword_20; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_21() { return cRightCurlyBracketKeyword_21; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_22() { return cRightCurlyBracketKeyword_22; }
	}

	public class AuthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Auth");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPasswordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCredentialParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////
		//Auth:
		//	Password | Key | Credential;
		public ParserRule getRule() { return rule; }

		//Password | Key | Credential
		public Alternatives getAlternatives() { return cAlternatives; }

		//Password
		public RuleCall getPasswordParserRuleCall_0() { return cPasswordParserRuleCall_0; }

		//Key
		public RuleCall getKeyParserRuleCall_1() { return cKeyParserRuleCall_1; }

		//Credential
		public RuleCall getCredentialParserRuleCall_2() { return cCredentialParserRuleCall_2; }
	}

	public class PasswordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Password");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypePasswordKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUsernameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUsernameEStringParserRuleCall_4_0 = (RuleCall)cUsernameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPasswordAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPasswordEStringParserRuleCall_6_0 = (RuleCall)cPasswordAssignment_6.eContents().get(0);
		
		//Password:
		//	"auth" type="password" name=EString ":=" username=EString "," password=EString;
		public ParserRule getRule() { return rule; }

		//"auth" type="password" name=EString ":=" username=EString "," password=EString
		public Group getGroup() { return cGroup; }

		//"auth"
		public Keyword getAuthKeyword_0() { return cAuthKeyword_0; }

		//type="password"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"password"
		public Keyword getTypePasswordKeyword_1_0() { return cTypePasswordKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//username=EString
		public Assignment getUsernameAssignment_4() { return cUsernameAssignment_4; }

		//EString
		public RuleCall getUsernameEStringParserRuleCall_4_0() { return cUsernameEStringParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//password=EString
		public Assignment getPasswordAssignment_6() { return cPasswordAssignment_6; }

		//EString
		public RuleCall getPasswordEStringParserRuleCall_6_0() { return cPasswordEStringParserRuleCall_6_0; }
	}

	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeKeyKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyFileEStringParserRuleCall_4_0 = (RuleCall)cKeyFileAssignment_4.eContents().get(0);
		
		//Key:
		//	"auth" type="key" name=EString ":=" keyFile=EString;
		public ParserRule getRule() { return rule; }

		//"auth" type="key" name=EString ":=" keyFile=EString
		public Group getGroup() { return cGroup; }

		//"auth"
		public Keyword getAuthKeyword_0() { return cAuthKeyword_0; }

		//type="key"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"key"
		public Keyword getTypeKeyKeyword_1_0() { return cTypeKeyKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//keyFile=EString
		public Assignment getKeyFileAssignment_4() { return cKeyFileAssignment_4; }

		//EString
		public RuleCall getKeyFileEStringParserRuleCall_4_0() { return cKeyFileEStringParserRuleCall_4_0; }
	}

	public class CredentialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Credential");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeCredentialKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCredentialFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCredentialFileEStringParserRuleCall_4_0 = (RuleCall)cCredentialFileAssignment_4.eContents().get(0);
		
		//Credential:
		//	"auth" type="credential" name=EString ":=" credentialFile=EString;
		public ParserRule getRule() { return rule; }

		//"auth" type="credential" name=EString ":=" credentialFile=EString
		public Group getGroup() { return cGroup; }

		//"auth"
		public Keyword getAuthKeyword_0() { return cAuthKeyword_0; }

		//type="credential"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"credential"
		public Keyword getTypeCredentialKeyword_1_0() { return cTypeCredentialKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//credentialFile=EString
		public Assignment getCredentialFileAssignment_4() { return cCredentialFileAssignment_4; }

		//EString
		public RuleCall getCredentialFileEStringParserRuleCall_4_0() { return cCredentialFileEStringParserRuleCall_4_0; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourcesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCpuAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCpuCPUParserRuleCall_3_0 = (RuleCall)cCpuAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMemoryAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMemoryINTTerminalRuleCall_5_0 = (RuleCall)cMemoryAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cDiskAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDiskINTTerminalRuleCall_7_0 = (RuleCall)cDiskAssignment_7.eContents().get(0);
		private final Keyword cCommaKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cRelaxAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRelaxINTTerminalRuleCall_9_0 = (RuleCall)cRelaxAssignment_9.eContents().get(0);
		
		/////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////
		//Resource:
		//	"resources" name=EString ":=" cpu=CPU "," memory=INT "," disk=INT "," relax=INT;
		public ParserRule getRule() { return rule; }

		//"resources" name=EString ":=" cpu=CPU "," memory=INT "," disk=INT "," relax=INT
		public Group getGroup() { return cGroup; }

		//"resources"
		public Keyword getResourcesKeyword_0() { return cResourcesKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//cpu=CPU
		public Assignment getCpuAssignment_3() { return cCpuAssignment_3; }

		//CPU
		public RuleCall getCpuCPUParserRuleCall_3_0() { return cCpuCPUParserRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//memory=INT
		public Assignment getMemoryAssignment_5() { return cMemoryAssignment_5; }

		//INT
		public RuleCall getMemoryINTTerminalRuleCall_5_0() { return cMemoryINTTerminalRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//disk=INT
		public Assignment getDiskAssignment_7() { return cDiskAssignment_7; }

		//INT
		public RuleCall getDiskINTTerminalRuleCall_7_0() { return cDiskINTTerminalRuleCall_7_0; }

		//","
		public Keyword getCommaKeyword_8() { return cCommaKeyword_8; }

		//relax=INT
		public Assignment getRelaxAssignment_9() { return cRelaxAssignment_9; }

		//INT
		public RuleCall getRelaxINTTerminalRuleCall_9_0() { return cRelaxINTTerminalRuleCall_9_0; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////
		//Dependency:
		//	Install | Service | File;
		public ParserRule getRule() { return rule; }

		//Install | Service | File
		public Alternatives getAlternatives() { return cAlternatives; }

		//Install
		public RuleCall getInstallParserRuleCall_0() { return cInstallParserRuleCall_0; }

		//Service
		public RuleCall getServiceParserRuleCall_1() { return cServiceParserRuleCall_1; }

		//File
		public RuleCall getFileParserRuleCall_2() { return cFileParserRuleCall_2; }
	}

	public class InstallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Install");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeInstallKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDepNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDepNameEStringParserRuleCall_4_0 = (RuleCall)cDepNameAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDepVersionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDepVersionEFloatParserRuleCall_6_0 = (RuleCall)cDepVersionAssignment_6.eContents().get(0);
		
		//Install:
		//	"dependency" type="install" name=EString ":=" depName=EString "," depVersion=EFloat;
		public ParserRule getRule() { return rule; }

		//"dependency" type="install" name=EString ":=" depName=EString "," depVersion=EFloat
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//type="install"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"install"
		public Keyword getTypeInstallKeyword_1_0() { return cTypeInstallKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//depName=EString
		public Assignment getDepNameAssignment_4() { return cDepNameAssignment_4; }

		//EString
		public RuleCall getDepNameEStringParserRuleCall_4_0() { return cDepNameEStringParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//depVersion=EFloat
		public Assignment getDepVersionAssignment_6() { return cDepVersionAssignment_6; }

		//EFloat
		public RuleCall getDepVersionEFloatParserRuleCall_6_0() { return cDepVersionEFloatParserRuleCall_6_0; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeServiceKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cSrvActionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSrvActionSrvSignalEnumRuleCall_2_0 = (RuleCall)cSrvActionAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cServiceNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cServiceNameEStringParserRuleCall_5_0 = (RuleCall)cServiceNameAssignment_5.eContents().get(0);
		
		//Service:
		//	"dependency" type="service" srvAction=SrvSignal name=EString ":=" serviceName=EString;
		public ParserRule getRule() { return rule; }

		//"dependency" type="service" srvAction=SrvSignal name=EString ":=" serviceName=EString
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//type="service"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"service"
		public Keyword getTypeServiceKeyword_1_0() { return cTypeServiceKeyword_1_0; }

		//srvAction=SrvSignal
		public Assignment getSrvActionAssignment_2() { return cSrvActionAssignment_2; }

		//SrvSignal
		public RuleCall getSrvActionSrvSignalEnumRuleCall_2_0() { return cSrvActionSrvSignalEnumRuleCall_2_0; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//serviceName=EString
		public Assignment getServiceNameAssignment_5() { return cServiceNameAssignment_5; }

		//EString
		public RuleCall getServiceNameEStringParserRuleCall_5_0() { return cServiceNameEStringParserRuleCall_5_0; }
	}

	public class FileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "File");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeFileKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cFileTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFileTypeFileTypeEnumRuleCall_2_0 = (RuleCall)cFileTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocationEStringParserRuleCall_5_0 = (RuleCall)cLocationAssignment_5.eContents().get(0);
		
		//File:
		//	"dependency" type="file" fileType=FileType name=EString ":=" location=EString;
		public ParserRule getRule() { return rule; }

		//"dependency" type="file" fileType=FileType name=EString ":=" location=EString
		public Group getGroup() { return cGroup; }

		//"dependency"
		public Keyword getDependencyKeyword_0() { return cDependencyKeyword_0; }

		//type="file"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"file"
		public Keyword getTypeFileKeyword_1_0() { return cTypeFileKeyword_1_0; }

		//fileType=FileType
		public Assignment getFileTypeAssignment_2() { return cFileTypeAssignment_2; }

		//FileType
		public RuleCall getFileTypeFileTypeEnumRuleCall_2_0() { return cFileTypeFileTypeEnumRuleCall_2_0; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }

		//location=EString
		public Assignment getLocationAssignment_5() { return cLocationAssignment_5; }

		//EString
		public RuleCall getLocationEStringParserRuleCall_5_0() { return cLocationEStringParserRuleCall_5_0; }
	}

	public class ArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Artifact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCodeExternalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cScriptParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cScriptCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cScriptBlockParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/////////////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////
		//Artifact:
		//	Code | CodeExternal | Script | ScriptCommand | ScriptBlock;
		public ParserRule getRule() { return rule; }

		//Code | CodeExternal | Script | ScriptCommand | ScriptBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//Code
		public RuleCall getCodeParserRuleCall_0() { return cCodeParserRuleCall_0; }

		//CodeExternal
		public RuleCall getCodeExternalParserRuleCall_1() { return cCodeExternalParserRuleCall_1; }

		//Script
		public RuleCall getScriptParserRuleCall_2() { return cScriptParserRuleCall_2; }

		//ScriptCommand
		public RuleCall getScriptCommandParserRuleCall_3() { return cScriptCommandParserRuleCall_3; }

		//ScriptBlock
		public RuleCall getScriptBlockParserRuleCall_4() { return cScriptBlockParserRuleCall_4; }
	}

	public class ConfArtifactElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfArtifact");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConfigParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConfigBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConfArtifact:
		//	Config | ConfigBlock;
		public ParserRule getRule() { return rule; }

		//Config | ConfigBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//Config
		public RuleCall getConfigParserRuleCall_0() { return cConfigParserRuleCall_0; }

		//ConfigBlock
		public RuleCall getConfigBlockParserRuleCall_1() { return cConfigBlockParserRuleCall_1; }
	}

	public class ConfigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Config");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeConfigKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocalFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocalFileEStringParserRuleCall_4_0 = (RuleCall)cLocalFileAssignment_4.eContents().get(0);
		private final Assignment cDestFileAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDestFileEStringParserRuleCall_5_0 = (RuleCall)cDestFileAssignment_5.eContents().get(0);
		
		//Config:
		//	"artifact" type="config" name=EString ":=" localFile=EString destFile=EString;
		public ParserRule getRule() { return rule; }

		//"artifact" type="config" name=EString ":=" localFile=EString destFile=EString
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="config"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"config"
		public Keyword getTypeConfigKeyword_1_0() { return cTypeConfigKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//localFile=EString
		public Assignment getLocalFileAssignment_4() { return cLocalFileAssignment_4; }

		//EString
		public RuleCall getLocalFileEStringParserRuleCall_4_0() { return cLocalFileEStringParserRuleCall_4_0; }

		//destFile=EString
		public Assignment getDestFileAssignment_5() { return cDestFileAssignment_5; }

		//EString
		public RuleCall getDestFileEStringParserRuleCall_5_0() { return cDestFileEStringParserRuleCall_5_0; }
	}

	public class ConfigBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeConfigBlockKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDestFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestFileEStringParserRuleCall_4_0 = (RuleCall)cDestFileAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cConfigAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConfigEStringParserRuleCall_6_0 = (RuleCall)cConfigAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ConfigBlock:
		//	"artifact" type="config-block" name=EString ":=" destFile=EString "{" config=EString "}";
		public ParserRule getRule() { return rule; }

		//"artifact" type="config-block" name=EString ":=" destFile=EString "{" config=EString "}"
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="config-block"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"config-block"
		public Keyword getTypeConfigBlockKeyword_1_0() { return cTypeConfigBlockKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//destFile=EString
		public Assignment getDestFileAssignment_4() { return cDestFileAssignment_4; }

		//EString
		public RuleCall getDestFileEStringParserRuleCall_4_0() { return cDestFileEStringParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//config=EString
		public Assignment getConfigAssignment_6() { return cConfigAssignment_6; }

		//EString
		public RuleCall getConfigEStringParserRuleCall_6_0() { return cConfigEStringParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeCodeKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cCodeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cCodeEStringParserRuleCall_5_0 = (RuleCall)cCodeAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Code:
		//	"artifact" type="code" name=EString ":=" "{" code=EString "}";
		public ParserRule getRule() { return rule; }

		//"artifact" type="code" name=EString ":=" "{" code=EString "}"
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="code"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"code"
		public Keyword getTypeCodeKeyword_1_0() { return cTypeCodeKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//code=EString
		public Assignment getCodeAssignment_5() { return cCodeAssignment_5; }

		//EString
		public RuleCall getCodeEStringParserRuleCall_5_0() { return cCodeEStringParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class CodeExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CodeExternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeCodeExternalKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClassAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClassEStringParserRuleCall_4_0 = (RuleCall)cClassAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMethodAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMethodEStringParserRuleCall_6_0 = (RuleCall)cMethodAssignment_6.eContents().get(0);
		
		//CodeExternal:
		//	"artifact" type="code-external" name=EString ":=" class=EString "," method=EString;
		public ParserRule getRule() { return rule; }

		//"artifact" type="code-external" name=EString ":=" class=EString "," method=EString
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="code-external"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"code-external"
		public Keyword getTypeCodeExternalKeyword_1_0() { return cTypeCodeExternalKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//class=EString
		public Assignment getClassAssignment_4() { return cClassAssignment_4; }

		//EString
		public RuleCall getClassEStringParserRuleCall_4_0() { return cClassEStringParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//method=EString
		public Assignment getMethodAssignment_6() { return cMethodAssignment_6; }

		//EString
		public RuleCall getMethodEStringParserRuleCall_6_0() { return cMethodEStringParserRuleCall_6_0; }
	}

	public class ScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Script");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeScriptKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScriptFileAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScriptFileEStringParserRuleCall_4_0 = (RuleCall)cScriptFileAssignment_4.eContents().get(0);
		
		//Script:
		//	"artifact" type="script" name=EString ":=" scriptFile=EString;
		public ParserRule getRule() { return rule; }

		//"artifact" type="script" name=EString ":=" scriptFile=EString
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="script"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"script"
		public Keyword getTypeScriptKeyword_1_0() { return cTypeScriptKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//scriptFile=EString
		public Assignment getScriptFileAssignment_4() { return cScriptFileAssignment_4; }

		//EString
		public RuleCall getScriptFileEStringParserRuleCall_4_0() { return cScriptFileEStringParserRuleCall_4_0; }
	}

	public class ScriptCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeScriptCommandKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cScriptCommandAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScriptCommandEStringParserRuleCall_4_0 = (RuleCall)cScriptCommandAssignment_4.eContents().get(0);
		
		//ScriptCommand:
		//	"artifact" type="script-command" name=EString ":=" scriptCommand=EString;
		public ParserRule getRule() { return rule; }

		//"artifact" type="script-command" name=EString ":=" scriptCommand=EString
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="script-command"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"script-command"
		public Keyword getTypeScriptCommandKeyword_1_0() { return cTypeScriptCommandKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//scriptCommand=EString
		public Assignment getScriptCommandAssignment_4() { return cScriptCommandAssignment_4; }

		//EString
		public RuleCall getScriptCommandEStringParserRuleCall_4_0() { return cScriptCommandEStringParserRuleCall_4_0; }
	}

	public class ScriptBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScriptBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArtifactKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cTypeScriptBlockKeyword_1_0 = (Keyword)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockEStringParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ScriptBlock:
		//	"artifact" type="script-block" name=EString ":=" "{" block=EString "}";
		public ParserRule getRule() { return rule; }

		//"artifact" type="script-block" name=EString ":=" "{" block=EString "}"
		public Group getGroup() { return cGroup; }

		//"artifact"
		public Keyword getArtifactKeyword_0() { return cArtifactKeyword_0; }

		//type="script-block"
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"script-block"
		public Keyword getTypeScriptBlockKeyword_1_0() { return cTypeScriptBlockKeyword_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//block=EString
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }

		//EString
		public RuleCall getBlockEStringParserRuleCall_5_0() { return cBlockEStringParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NodesetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Nodeset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRangeEStringParserRuleCall_3_0 = (RuleCall)cRangeAssignment_3.eContents().get(0);
		
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		//Nodeset:
		//	"nodeset" name=EString ":=" range=EString;
		public ParserRule getRule() { return rule; }

		//"nodeset" name=EString ":=" range=EString
		public Group getGroup() { return cGroup; }

		//"nodeset"
		public Keyword getNodesetKeyword_0() { return cNodesetKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//range=EString
		public Assignment getRangeAssignment_3() { return cRangeAssignment_3; }

		//EString
		public RuleCall getRangeEStringParserRuleCall_3_0() { return cRangeEStringParserRuleCall_3_0; }
	}

	public class SetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Setup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetupAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSetupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProviderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cProviderProvidersCrossReference_4_0 = (CrossReference)cProviderAssignment_4.eContents().get(0);
		private final RuleCall cProviderProvidersIDTerminalRuleCall_4_0_1 = (RuleCall)cProviderProvidersCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNumberMachinesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNumberMachinesEIntParserRuleCall_6_0 = (RuleCall)cNumberMachinesAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cAutoscaleAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAutoscaleEBooleanParserRuleCall_8_0 = (RuleCall)cAutoscaleAssignment_8.eContents().get(0);
		private final Keyword cCommaKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPredictiveAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPredictiveEBooleanParserRuleCall_10_0 = (RuleCall)cPredictiveAssignment_10.eContents().get(0);
		
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		//Setup:
		//	{Setup} "setup" name=EString ":=" provider=[Providers] "," numberMachines=EInt "," autoscale=EBoolean ","
		//	predictive=EBoolean;
		public ParserRule getRule() { return rule; }

		//{Setup} "setup" name=EString ":=" provider=[Providers] "," numberMachines=EInt "," autoscale=EBoolean ","
		//predictive=EBoolean
		public Group getGroup() { return cGroup; }

		//{Setup}
		public Action getSetupAction_0() { return cSetupAction_0; }

		//"setup"
		public Keyword getSetupKeyword_1() { return cSetupKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_3() { return cColonEqualsSignKeyword_3; }

		//provider=[Providers]
		public Assignment getProviderAssignment_4() { return cProviderAssignment_4; }

		//[Providers]
		public CrossReference getProviderProvidersCrossReference_4_0() { return cProviderProvidersCrossReference_4_0; }

		//ID
		public RuleCall getProviderProvidersIDTerminalRuleCall_4_0_1() { return cProviderProvidersIDTerminalRuleCall_4_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//numberMachines=EInt
		public Assignment getNumberMachinesAssignment_6() { return cNumberMachinesAssignment_6; }

		//EInt
		public RuleCall getNumberMachinesEIntParserRuleCall_6_0() { return cNumberMachinesEIntParserRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//autoscale=EBoolean
		public Assignment getAutoscaleAssignment_8() { return cAutoscaleAssignment_8; }

		//EBoolean
		public RuleCall getAutoscaleEBooleanParserRuleCall_8_0() { return cAutoscaleEBooleanParserRuleCall_8_0; }

		//","
		public Keyword getCommaKeyword_9() { return cCommaKeyword_9; }

		//predictive=EBoolean
		public Assignment getPredictiveAssignment_10() { return cPredictiveAssignment_10; }

		//EBoolean
		public RuleCall getPredictiveEBooleanParserRuleCall_10_0() { return cPredictiveEBooleanParserRuleCall_10_0; }
	}

	public class DeployElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Deploy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeployKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetupsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSetupsSetupCrossReference_4_0 = (CrossReference)cSetupsAssignment_4.eContents().get(0);
		private final RuleCall cSetupsSetupIDTerminalRuleCall_4_0_1 = (RuleCall)cSetupsSetupCrossReference_4_0.eContents().get(1);
		private final Keyword cTimeoutKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTimeoutAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTimeoutEIntParserRuleCall_6_0 = (RuleCall)cTimeoutAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cExecutionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cExecutionsExecutionParserRuleCall_8_0 = (RuleCall)cExecutionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		///////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////
		//Deploy:
		//	"deploy" name=EString ":=" "in" setups+=[Setup]* "timeout" timeout=EInt "{" executions+=Execution* "}";
		public ParserRule getRule() { return rule; }

		//"deploy" name=EString ":=" "in" setups+=[Setup]* "timeout" timeout=EInt "{" executions+=Execution* "}"
		public Group getGroup() { return cGroup; }

		//"deploy"
		public Keyword getDeployKeyword_0() { return cDeployKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//setups+=[Setup]*
		public Assignment getSetupsAssignment_4() { return cSetupsAssignment_4; }

		//[Setup]
		public CrossReference getSetupsSetupCrossReference_4_0() { return cSetupsSetupCrossReference_4_0; }

		//ID
		public RuleCall getSetupsSetupIDTerminalRuleCall_4_0_1() { return cSetupsSetupIDTerminalRuleCall_4_0_1; }

		//"timeout"
		public Keyword getTimeoutKeyword_5() { return cTimeoutKeyword_5; }

		//timeout=EInt
		public Assignment getTimeoutAssignment_6() { return cTimeoutAssignment_6; }

		//EInt
		public RuleCall getTimeoutEIntParserRuleCall_6_0() { return cTimeoutEIntParserRuleCall_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//executions+=Execution*
		public Assignment getExecutionsAssignment_8() { return cExecutionsAssignment_8; }

		//Execution
		public RuleCall getExecutionsExecutionParserRuleCall_8_0() { return cExecutionsExecutionParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Execution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCodeArtifactCrossReference_3_0 = (CrossReference)cCodeAssignment_3.eContents().get(0);
		private final RuleCall cCodeArtifactIDTerminalRuleCall_3_0_1 = (RuleCall)cCodeArtifactCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConfigAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cConfigConfArtifactCrossReference_4_1_0 = (CrossReference)cConfigAssignment_4_1.eContents().get(0);
		private final RuleCall cConfigConfArtifactIDTerminalRuleCall_4_1_0_1 = (RuleCall)cConfigConfArtifactCrossReference_4_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNodesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cNodesNodesetCrossReference_6_0 = (CrossReference)cNodesAssignment_6.eContents().get(0);
		private final RuleCall cNodesNodesetIDTerminalRuleCall_6_0_1 = (RuleCall)cNodesNodesetCrossReference_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSeqAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSeqEIntParserRuleCall_8_0 = (RuleCall)cSeqAssignment_8.eContents().get(0);
		
		//Execution:
		//	"exec" name=EString ":=" code=[Artifact] ("," config+=[ConfArtifact])? "," nodes=[Nodeset] "," seq=EInt;
		public ParserRule getRule() { return rule; }

		//"exec" name=EString ":=" code=[Artifact] ("," config+=[ConfArtifact])? "," nodes=[Nodeset] "," seq=EInt
		public Group getGroup() { return cGroup; }

		//"exec"
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//code=[Artifact]
		public Assignment getCodeAssignment_3() { return cCodeAssignment_3; }

		//[Artifact]
		public CrossReference getCodeArtifactCrossReference_3_0() { return cCodeArtifactCrossReference_3_0; }

		//ID
		public RuleCall getCodeArtifactIDTerminalRuleCall_3_0_1() { return cCodeArtifactIDTerminalRuleCall_3_0_1; }

		//("," config+=[ConfArtifact])?
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//config+=[ConfArtifact]
		public Assignment getConfigAssignment_4_1() { return cConfigAssignment_4_1; }

		//[ConfArtifact]
		public CrossReference getConfigConfArtifactCrossReference_4_1_0() { return cConfigConfArtifactCrossReference_4_1_0; }

		//ID
		public RuleCall getConfigConfArtifactIDTerminalRuleCall_4_1_0_1() { return cConfigConfArtifactIDTerminalRuleCall_4_1_0_1; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//nodes=[Nodeset]
		public Assignment getNodesAssignment_6() { return cNodesAssignment_6; }

		//[Nodeset]
		public CrossReference getNodesNodesetCrossReference_6_0() { return cNodesNodesetCrossReference_6_0; }

		//ID
		public RuleCall getNodesNodesetIDTerminalRuleCall_6_0_1() { return cNodesNodesetIDTerminalRuleCall_6_0_1; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//seq=EInt
		public Assignment getSeqAssignment_8() { return cSeqAssignment_8; }

		//EInt
		public RuleCall getSeqEIntParserRuleCall_8_0() { return cSeqEIntParserRuleCall_8_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///////////////////////////////////////////////////////////////
		//////
		//// GiraffeDSL Types
		//////
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EFloat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EFloat returns ecore::EFloat:
		//	INT "." INT | INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT "." INT
		public Group getGroup_0() { return cGroup_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_0() { return cINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class CPUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CPU");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CPU returns ecore::EString:
		//	INT "*" INT;
		public ParserRule getRule() { return rule; }

		//INT "*" INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	
	
	public class NativeProvTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NativeProvType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAmazonEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAmazonAmazonKeyword_0_0 = (Keyword)cAmazonEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGoogleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGoogleGoogleKeyword_1_0 = (Keyword)cGoogleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cG5000EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cG5000G5000Keyword_2_0 = (Keyword)cG5000EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cVirtualboxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cVirtualboxVirtualboxKeyword_3_0 = (Keyword)cVirtualboxEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum NativeProvType:
		//	amazon | google | g5000 | virtualbox;
		public EnumRule getRule() { return rule; }

		//amazon | google | g5000 | virtualbox
		public Alternatives getAlternatives() { return cAlternatives; }

		//amazon
		public EnumLiteralDeclaration getAmazonEnumLiteralDeclaration_0() { return cAmazonEnumLiteralDeclaration_0; }

		//"amazon"
		public Keyword getAmazonAmazonKeyword_0_0() { return cAmazonAmazonKeyword_0_0; }

		//google
		public EnumLiteralDeclaration getGoogleEnumLiteralDeclaration_1() { return cGoogleEnumLiteralDeclaration_1; }

		//"google"
		public Keyword getGoogleGoogleKeyword_1_0() { return cGoogleGoogleKeyword_1_0; }

		//g5000
		public EnumLiteralDeclaration getG5000EnumLiteralDeclaration_2() { return cG5000EnumLiteralDeclaration_2; }

		//"g5000"
		public Keyword getG5000G5000Keyword_2_0() { return cG5000G5000Keyword_2_0; }

		//virtualbox
		public EnumLiteralDeclaration getVirtualboxEnumLiteralDeclaration_3() { return cVirtualboxEnumLiteralDeclaration_3; }

		//"virtualbox"
		public Keyword getVirtualboxVirtualboxKeyword_3_0() { return cVirtualboxVirtualboxKeyword_3_0; }
	}

	public class NativeSOElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NativeSO");
		private final EnumLiteralDeclaration cLinuxEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLinuxLinuxKeyword_0 = (Keyword)cLinuxEnumLiteralDeclaration.eContents().get(0);
		
		//enum NativeSO:
		//	linux;
		public EnumRule getRule() { return rule; }

		//linux
		public EnumLiteralDeclaration getLinuxEnumLiteralDeclaration() { return cLinuxEnumLiteralDeclaration; }

		//"linux"
		public Keyword getLinuxLinuxKeyword_0() { return cLinuxLinuxKeyword_0; }
	}

	public class NativeRequirementElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NativeRequirement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSshEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSshSshKeyword_0_0 = (Keyword)cSshEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTomcatEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTomcatTomcatKeyword_1_0 = (Keyword)cTomcatEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cApacheEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cApacheHttpdKeyword_2_0 = (Keyword)cApacheEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NativeRequirement:
		//	ssh | tomcat | apache="httpd";
		public EnumRule getRule() { return rule; }

		//ssh | tomcat | apache="httpd"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ssh
		public EnumLiteralDeclaration getSshEnumLiteralDeclaration_0() { return cSshEnumLiteralDeclaration_0; }

		//"ssh"
		public Keyword getSshSshKeyword_0_0() { return cSshSshKeyword_0_0; }

		//tomcat
		public EnumLiteralDeclaration getTomcatEnumLiteralDeclaration_1() { return cTomcatEnumLiteralDeclaration_1; }

		//"tomcat"
		public Keyword getTomcatTomcatKeyword_1_0() { return cTomcatTomcatKeyword_1_0; }

		//apache="httpd"
		public EnumLiteralDeclaration getApacheEnumLiteralDeclaration_2() { return cApacheEnumLiteralDeclaration_2; }

		//"httpd"
		public Keyword getApacheHttpdKeyword_2_0() { return cApacheHttpdKeyword_2_0; }
	}

	public class NativeDistributionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NativeDistribution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUbuntuEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUbuntuUbuntuKeyword_0_0 = (Keyword)cUbuntuEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDebianEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDebianDebianKeyword_1_0 = (Keyword)cDebianEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCentosEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCentosCentosKeyword_2_0 = (Keyword)cCentosEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFedoraEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFedoraFedoraKeyword_3_0 = (Keyword)cFedoraEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum NativeDistribution:
		//	ubuntu | debian | centos | fedora;
		public EnumRule getRule() { return rule; }

		//ubuntu | debian | centos | fedora
		public Alternatives getAlternatives() { return cAlternatives; }

		//ubuntu
		public EnumLiteralDeclaration getUbuntuEnumLiteralDeclaration_0() { return cUbuntuEnumLiteralDeclaration_0; }

		//"ubuntu"
		public Keyword getUbuntuUbuntuKeyword_0_0() { return cUbuntuUbuntuKeyword_0_0; }

		//debian
		public EnumLiteralDeclaration getDebianEnumLiteralDeclaration_1() { return cDebianEnumLiteralDeclaration_1; }

		//"debian"
		public Keyword getDebianDebianKeyword_1_0() { return cDebianDebianKeyword_1_0; }

		//centos
		public EnumLiteralDeclaration getCentosEnumLiteralDeclaration_2() { return cCentosEnumLiteralDeclaration_2; }

		//"centos"
		public Keyword getCentosCentosKeyword_2_0() { return cCentosCentosKeyword_2_0; }

		//fedora
		public EnumLiteralDeclaration getFedoraEnumLiteralDeclaration_3() { return cFedoraEnumLiteralDeclaration_3; }

		//"fedora"
		public Keyword getFedoraFedoraKeyword_3_0() { return cFedoraFedoraKeyword_3_0; }
	}

	public class SrvSignalElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SrvSignal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartStartKeyword_0_0 = (Keyword)cStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRestartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRestartRestartKeyword_1_0 = (Keyword)cRestartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStopEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStopStopKeyword_2_0 = (Keyword)cStopEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SrvSignal:
		//	start | restart | stop;
		public EnumRule getRule() { return rule; }

		//start | restart | stop
		public Alternatives getAlternatives() { return cAlternatives; }

		//start
		public EnumLiteralDeclaration getStartEnumLiteralDeclaration_0() { return cStartEnumLiteralDeclaration_0; }

		//"start"
		public Keyword getStartStartKeyword_0_0() { return cStartStartKeyword_0_0; }

		//restart
		public EnumLiteralDeclaration getRestartEnumLiteralDeclaration_1() { return cRestartEnumLiteralDeclaration_1; }

		//"restart"
		public Keyword getRestartRestartKeyword_1_0() { return cRestartRestartKeyword_1_0; }

		//stop
		public EnumLiteralDeclaration getStopEnumLiteralDeclaration_2() { return cStopEnumLiteralDeclaration_2; }

		//"stop"
		public Keyword getStopStopKeyword_2_0() { return cStopStopKeyword_2_0; }
	}

	public class FileTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FileType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLocalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLocalLocalKeyword_0_0 = (Keyword)cLocalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoteRemoteKeyword_1_0 = (Keyword)cRemoteEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum FileType:
		//	local | remote;
		public EnumRule getRule() { return rule; }

		//local | remote
		public Alternatives getAlternatives() { return cAlternatives; }

		//local
		public EnumLiteralDeclaration getLocalEnumLiteralDeclaration_0() { return cLocalEnumLiteralDeclaration_0; }

		//"local"
		public Keyword getLocalLocalKeyword_0_0() { return cLocalLocalKeyword_0_0; }

		//remote
		public EnumLiteralDeclaration getRemoteEnumLiteralDeclaration_1() { return cRemoteEnumLiteralDeclaration_1; }

		//"remote"
		public Keyword getRemoteRemoteKeyword_1_0() { return cRemoteRemoteKeyword_1_0; }
	}

	public class MonitoringTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MonitoringType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPredictiveEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPredictivePredictiveKeyword_0_0 = (Keyword)cPredictiveEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cReactiveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cReactiveReactiveKeyword_1_0 = (Keyword)cReactiveEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MonitoringType:
		//	predictive | reactive;
		public EnumRule getRule() { return rule; }

		//predictive | reactive
		public Alternatives getAlternatives() { return cAlternatives; }

		//predictive
		public EnumLiteralDeclaration getPredictiveEnumLiteralDeclaration_0() { return cPredictiveEnumLiteralDeclaration_0; }

		//"predictive"
		public Keyword getPredictivePredictiveKeyword_0_0() { return cPredictivePredictiveKeyword_0_0; }

		//reactive
		public EnumLiteralDeclaration getReactiveEnumLiteralDeclaration_1() { return cReactiveEnumLiteralDeclaration_1; }

		//"reactive"
		public Keyword getReactiveReactiveKeyword_1_0() { return cReactiveReactiveKeyword_1_0; }
	}
	
	private GiraffeMetaModelElements pGiraffeMetaModel;
	private EnvironmentElements pEnvironment;
	private DeploymentDefinitionsElements pDeploymentDefinitions;
	private DeploymentElements pDeployment;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private QualifiedNameElements pQualifiedName;
	private VirtualMachineElements pVirtualMachine;
	private RequerimentsElements pRequeriments;
	private ProvidersElements pProviders;
	private ProviderElements pProvider;
	private OtherProviderElements pOtherProvider;
	private AuthElements pAuth;
	private PasswordElements pPassword;
	private KeyElements pKey;
	private CredentialElements pCredential;
	private ResourceElements pResource;
	private DependencyElements pDependency;
	private InstallElements pInstall;
	private ServiceElements pService;
	private FileElements pFile;
	private ArtifactElements pArtifact;
	private ConfArtifactElements pConfArtifact;
	private ConfigElements pConfig;
	private ConfigBlockElements pConfigBlock;
	private CodeElements pCode;
	private CodeExternalElements pCodeExternal;
	private ScriptElements pScript;
	private ScriptCommandElements pScriptCommand;
	private ScriptBlockElements pScriptBlock;
	private NodesetElements pNodeset;
	private SetupElements pSetup;
	private DeployElements pDeploy;
	private ExecutionElements pExecution;
	private EStringElements pEString;
	private EFloatElements pEFloat;
	private EIntElements pEInt;
	private EBooleanElements pEBoolean;
	private CPUElements pCPU;
	private NativeProvTypeElements unknownRuleNativeProvType;
	private NativeSOElements unknownRuleNativeSO;
	private NativeRequirementElements unknownRuleNativeRequirement;
	private NativeDistributionElements unknownRuleNativeDistribution;
	private SrvSignalElements unknownRuleSrvSignal;
	private FileTypeElements unknownRuleFileType;
	private MonitoringTypeElements unknownRuleMonitoringType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public GiraffeDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.mines_nantes.atlanmod.giraffe.GiraffeDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//////
	//// Finish the deployment-definitions and deployment
	//// Review the elements names <-> Model names
	//// Blocks of Code
	//// Create a Xtend GiraffeDSL to Java code creator (Annotations + Return statements), only to extract the elements
	////// 
	//GiraffeMetaModel:
	//	imports+=Import* environment=Environment deploymentdefinitions=DeploymentDefinitions deployment=Deployment;
	public GiraffeMetaModelElements getGiraffeMetaModelAccess() {
		return (pGiraffeMetaModel != null) ? pGiraffeMetaModel : (pGiraffeMetaModel = new GiraffeMetaModelElements());
	}
	
	public ParserRule getGiraffeMetaModelRule() {
		return getGiraffeMetaModelAccess().getRule();
	}

	//Environment:
	//	{Environment} "environment" "{" auths+=Auth* resources+=Resource* dependencies+=Dependency*
	//	virtualmachines+=VirtualMachine* providers+=Providers* "}";
	public EnvironmentElements getEnvironmentAccess() {
		return (pEnvironment != null) ? pEnvironment : (pEnvironment = new EnvironmentElements());
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}

	//DeploymentDefinitions:
	//	{DeploymentDefinitions} "deployment-definitions" "{" artifacts+=(Artifact | ConfArtifact)* nodesets+=Nodeset* "}";
	public DeploymentDefinitionsElements getDeploymentDefinitionsAccess() {
		return (pDeploymentDefinitions != null) ? pDeploymentDefinitions : (pDeploymentDefinitions = new DeploymentDefinitionsElements());
	}
	
	public ParserRule getDeploymentDefinitionsRule() {
		return getDeploymentDefinitionsAccess().getRule();
	}

	//Deployment:
	//	"deployment" "{" setups=Setup deploys=Deploy "}";
	public DeploymentElements getDeploymentAccess() {
		return (pDeployment != null) ? pDeployment : (pDeployment = new DeploymentElements());
	}
	
	public ParserRule getDeploymentRule() {
		return getDeploymentAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//////
	//// GiraffeDSL Elements
	//////
	///////////////////////////////////////////////////////////////////
	//VirtualMachine:
	//	"virtualmachine" name=EString ":=" (so=NativeSO distribution=NativeDistribution version=EFloat) "," auth=[Auth]? ","
	//	dep+=[Dependency]* // "," (requirements+=Requeriments)*
	//;
	public VirtualMachineElements getVirtualMachineAccess() {
		return (pVirtualMachine != null) ? pVirtualMachine : (pVirtualMachine = new VirtualMachineElements());
	}
	
	public ParserRule getVirtualMachineRule() {
		return getVirtualMachineAccess().getRule();
	}

	//Requeriments:
	//	native=NativeRequirement | other=EString;
	public RequerimentsElements getRequerimentsAccess() {
		return (pRequeriments != null) ? pRequeriments : (pRequeriments = new RequerimentsElements());
	}
	
	public ParserRule getRequerimentsRule() {
		return getRequerimentsAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////
	//Providers:
	//	Provider | OtherProvider;
	public ProvidersElements getProvidersAccess() {
		return (pProviders != null) ? pProviders : (pProviders = new ProvidersElements());
	}
	
	public ParserRule getProvidersRule() {
		return getProvidersAccess().getRule();
	}

	//Provider:
	//	"provider" type=NativeProvType name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine]
	//	"," host=EString;
	public ProviderElements getProviderAccess() {
		return (pProvider != null) ? pProvider : (pProvider = new ProviderElements());
	}
	
	public ParserRule getProviderRule() {
		return getProviderAccess().getRule();
	}

	//OtherProvider:
	//	"provider" type="other" name=EString ":=" authMethod=[Auth] "," resources=[Resource] "," vm=[VirtualMachine] ","
	//	host=EString "{" imports+=Import* "connection" "{" "}" "resources" "{" "}" "virtualmachine" "{" "}" "}";
	public OtherProviderElements getOtherProviderAccess() {
		return (pOtherProvider != null) ? pOtherProvider : (pOtherProvider = new OtherProviderElements());
	}
	
	public ParserRule getOtherProviderRule() {
		return getOtherProviderAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////
	//Auth:
	//	Password | Key | Credential;
	public AuthElements getAuthAccess() {
		return (pAuth != null) ? pAuth : (pAuth = new AuthElements());
	}
	
	public ParserRule getAuthRule() {
		return getAuthAccess().getRule();
	}

	//Password:
	//	"auth" type="password" name=EString ":=" username=EString "," password=EString;
	public PasswordElements getPasswordAccess() {
		return (pPassword != null) ? pPassword : (pPassword = new PasswordElements());
	}
	
	public ParserRule getPasswordRule() {
		return getPasswordAccess().getRule();
	}

	//Key:
	//	"auth" type="key" name=EString ":=" keyFile=EString;
	public KeyElements getKeyAccess() {
		return (pKey != null) ? pKey : (pKey = new KeyElements());
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}

	//Credential:
	//	"auth" type="credential" name=EString ":=" credentialFile=EString;
	public CredentialElements getCredentialAccess() {
		return (pCredential != null) ? pCredential : (pCredential = new CredentialElements());
	}
	
	public ParserRule getCredentialRule() {
		return getCredentialAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	//Resource:
	//	"resources" name=EString ":=" cpu=CPU "," memory=INT "," disk=INT "," relax=INT;
	public ResourceElements getResourceAccess() {
		return (pResource != null) ? pResource : (pResource = new ResourceElements());
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	//Dependency:
	//	Install | Service | File;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Install:
	//	"dependency" type="install" name=EString ":=" depName=EString "," depVersion=EFloat;
	public InstallElements getInstallAccess() {
		return (pInstall != null) ? pInstall : (pInstall = new InstallElements());
	}
	
	public ParserRule getInstallRule() {
		return getInstallAccess().getRule();
	}

	//Service:
	//	"dependency" type="service" srvAction=SrvSignal name=EString ":=" serviceName=EString;
	public ServiceElements getServiceAccess() {
		return (pService != null) ? pService : (pService = new ServiceElements());
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//File:
	//	"dependency" type="file" fileType=FileType name=EString ":=" location=EString;
	public FileElements getFileAccess() {
		return (pFile != null) ? pFile : (pFile = new FileElements());
	}
	
	public ParserRule getFileRule() {
		return getFileAccess().getRule();
	}

	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	//Artifact:
	//	Code | CodeExternal | Script | ScriptCommand | ScriptBlock;
	public ArtifactElements getArtifactAccess() {
		return (pArtifact != null) ? pArtifact : (pArtifact = new ArtifactElements());
	}
	
	public ParserRule getArtifactRule() {
		return getArtifactAccess().getRule();
	}

	//ConfArtifact:
	//	Config | ConfigBlock;
	public ConfArtifactElements getConfArtifactAccess() {
		return (pConfArtifact != null) ? pConfArtifact : (pConfArtifact = new ConfArtifactElements());
	}
	
	public ParserRule getConfArtifactRule() {
		return getConfArtifactAccess().getRule();
	}

	//Config:
	//	"artifact" type="config" name=EString ":=" localFile=EString destFile=EString;
	public ConfigElements getConfigAccess() {
		return (pConfig != null) ? pConfig : (pConfig = new ConfigElements());
	}
	
	public ParserRule getConfigRule() {
		return getConfigAccess().getRule();
	}

	//ConfigBlock:
	//	"artifact" type="config-block" name=EString ":=" destFile=EString "{" config=EString "}";
	public ConfigBlockElements getConfigBlockAccess() {
		return (pConfigBlock != null) ? pConfigBlock : (pConfigBlock = new ConfigBlockElements());
	}
	
	public ParserRule getConfigBlockRule() {
		return getConfigBlockAccess().getRule();
	}

	//Code:
	//	"artifact" type="code" name=EString ":=" "{" code=EString "}";
	public CodeElements getCodeAccess() {
		return (pCode != null) ? pCode : (pCode = new CodeElements());
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//CodeExternal:
	//	"artifact" type="code-external" name=EString ":=" class=EString "," method=EString;
	public CodeExternalElements getCodeExternalAccess() {
		return (pCodeExternal != null) ? pCodeExternal : (pCodeExternal = new CodeExternalElements());
	}
	
	public ParserRule getCodeExternalRule() {
		return getCodeExternalAccess().getRule();
	}

	//Script:
	//	"artifact" type="script" name=EString ":=" scriptFile=EString;
	public ScriptElements getScriptAccess() {
		return (pScript != null) ? pScript : (pScript = new ScriptElements());
	}
	
	public ParserRule getScriptRule() {
		return getScriptAccess().getRule();
	}

	//ScriptCommand:
	//	"artifact" type="script-command" name=EString ":=" scriptCommand=EString;
	public ScriptCommandElements getScriptCommandAccess() {
		return (pScriptCommand != null) ? pScriptCommand : (pScriptCommand = new ScriptCommandElements());
	}
	
	public ParserRule getScriptCommandRule() {
		return getScriptCommandAccess().getRule();
	}

	//ScriptBlock:
	//	"artifact" type="script-block" name=EString ":=" "{" block=EString "}";
	public ScriptBlockElements getScriptBlockAccess() {
		return (pScriptBlock != null) ? pScriptBlock : (pScriptBlock = new ScriptBlockElements());
	}
	
	public ParserRule getScriptBlockRule() {
		return getScriptBlockAccess().getRule();
	}

	///////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////
	//Nodeset:
	//	"nodeset" name=EString ":=" range=EString;
	public NodesetElements getNodesetAccess() {
		return (pNodeset != null) ? pNodeset : (pNodeset = new NodesetElements());
	}
	
	public ParserRule getNodesetRule() {
		return getNodesetAccess().getRule();
	}

	///////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////
	//Setup:
	//	{Setup} "setup" name=EString ":=" provider=[Providers] "," numberMachines=EInt "," autoscale=EBoolean ","
	//	predictive=EBoolean;
	public SetupElements getSetupAccess() {
		return (pSetup != null) ? pSetup : (pSetup = new SetupElements());
	}
	
	public ParserRule getSetupRule() {
		return getSetupAccess().getRule();
	}

	///////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////
	//Deploy:
	//	"deploy" name=EString ":=" "in" setups+=[Setup]* "timeout" timeout=EInt "{" executions+=Execution* "}";
	public DeployElements getDeployAccess() {
		return (pDeploy != null) ? pDeploy : (pDeploy = new DeployElements());
	}
	
	public ParserRule getDeployRule() {
		return getDeployAccess().getRule();
	}

	//Execution:
	//	"exec" name=EString ":=" code=[Artifact] ("," config+=[ConfArtifact])? "," nodes=[Nodeset] "," seq=EInt;
	public ExecutionElements getExecutionAccess() {
		return (pExecution != null) ? pExecution : (pExecution = new ExecutionElements());
	}
	
	public ParserRule getExecutionRule() {
		return getExecutionAccess().getRule();
	}

	///////////////////////////////////////////////////////////////
	//////
	//// GiraffeDSL Types
	//////
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EFloat returns ecore::EFloat:
	//	INT "." INT | INT;
	public EFloatElements getEFloatAccess() {
		return (pEFloat != null) ? pEFloat : (pEFloat = new EFloatElements());
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//CPU returns ecore::EString:
	//	INT "*" INT;
	public CPUElements getCPUAccess() {
		return (pCPU != null) ? pCPU : (pCPU = new CPUElements());
	}
	
	public ParserRule getCPURule() {
		return getCPUAccess().getRule();
	}

	//enum NativeProvType:
	//	amazon | google | g5000 | virtualbox;
	public NativeProvTypeElements getNativeProvTypeAccess() {
		return (unknownRuleNativeProvType != null) ? unknownRuleNativeProvType : (unknownRuleNativeProvType = new NativeProvTypeElements());
	}
	
	public EnumRule getNativeProvTypeRule() {
		return getNativeProvTypeAccess().getRule();
	}

	//enum NativeSO:
	//	linux;
	public NativeSOElements getNativeSOAccess() {
		return (unknownRuleNativeSO != null) ? unknownRuleNativeSO : (unknownRuleNativeSO = new NativeSOElements());
	}
	
	public EnumRule getNativeSORule() {
		return getNativeSOAccess().getRule();
	}

	//enum NativeRequirement:
	//	ssh | tomcat | apache="httpd";
	public NativeRequirementElements getNativeRequirementAccess() {
		return (unknownRuleNativeRequirement != null) ? unknownRuleNativeRequirement : (unknownRuleNativeRequirement = new NativeRequirementElements());
	}
	
	public EnumRule getNativeRequirementRule() {
		return getNativeRequirementAccess().getRule();
	}

	//enum NativeDistribution:
	//	ubuntu | debian | centos | fedora;
	public NativeDistributionElements getNativeDistributionAccess() {
		return (unknownRuleNativeDistribution != null) ? unknownRuleNativeDistribution : (unknownRuleNativeDistribution = new NativeDistributionElements());
	}
	
	public EnumRule getNativeDistributionRule() {
		return getNativeDistributionAccess().getRule();
	}

	//enum SrvSignal:
	//	start | restart | stop;
	public SrvSignalElements getSrvSignalAccess() {
		return (unknownRuleSrvSignal != null) ? unknownRuleSrvSignal : (unknownRuleSrvSignal = new SrvSignalElements());
	}
	
	public EnumRule getSrvSignalRule() {
		return getSrvSignalAccess().getRule();
	}

	//enum FileType:
	//	local | remote;
	public FileTypeElements getFileTypeAccess() {
		return (unknownRuleFileType != null) ? unknownRuleFileType : (unknownRuleFileType = new FileTypeElements());
	}
	
	public EnumRule getFileTypeRule() {
		return getFileTypeAccess().getRule();
	}

	//enum MonitoringType:
	//	predictive | reactive;
	public MonitoringTypeElements getMonitoringTypeAccess() {
		return (unknownRuleMonitoringType != null) ? unknownRuleMonitoringType : (unknownRuleMonitoringType = new MonitoringTypeElements());
	}
	
	public EnumRule getMonitoringTypeRule() {
		return getMonitoringTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
